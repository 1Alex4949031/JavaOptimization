javac Main.java
javap -c -v Main

Compiled from "UtilityClass.java"
public class UtilityClass {
  public UtilityClass();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public int getStringLength(java.lang.String);
    Code:
       0: aload_1
       1: ifnull        9
       4: aload_1
       5: invokevirtual #7                  // Method java/lang/String.length:()I
       8: ireturn
       9: iconst_0
      10: ireturn

  public java.lang.String callMethodOnObject(java.lang.Object, java.lang.String);
    Code:
       0: aload_1
       1: invokevirtual #13                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
       4: aload_2
       5: iconst_0
       6: anewarray     #17                 // class java/lang/Class
       9: invokevirtual #19                 // Method java/lang/Class.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;
      12: astore_3
      13: aload_3
      14: aload_1
      15: iconst_0
      16: anewarray     #2                  // class java/lang/Object
      19: invokevirtual #23                 // Method java/lang/reflect/Method.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;
      22: checkcast     #8                  // class java/lang/String
      25: areturn
      26: astore_3
      27: aload_3
      28: invokevirtual #31                 // Method java/lang/Exception.printStackTrace:()V
      31: aconst_null
      32: areturn
    Exception table:
       from    to  target type
           0    25    26   Class java/lang/Exception

  public void changeObjectField(java.lang.Object, java.lang.String, java.lang.String);
    Code:
       0: aload_1
       1: invokevirtual #13                 // Method java/lang/Object.getClass:()Ljava/lang/Class;

PS C:\XML\JavaOptimization\Task5\src\main\java> javac .\Main.java
PS C:\XML\JavaOptimization\Task5\src\main\java> javap -c -v Main
Classfile /C:/XML/JavaOptimization/Task5/src/main/java/Main.class
  Last modified 6 апр. 2024 г.; size 2298 bytes
  SHA-256 checksum 1e1048ad56996e246d10d8dba81fdd4a1a922f66035e3fd6b7d32d3a14a25e77


Compiled from "Main.java"
public class Main
  minor version: 0
  major version: 62
  flags: (0x0021) ACC_PUBLIC, ACC_SUPER
  this_class: #43                         // Main
  super_class: #2                         // java/lang/Object
  interfaces: 0, fields: 0, methods: 5, attributes: 3
Constant pool:
    #1 = Methodref          #2.#3         // java/lang/Object."<init>":()V
    #2 = Class              #4            // java/lang/Object
    #3 = NameAndType        #5:#6         // "<init>":()V
    #4 = Utf8               java/lang/Object
    #5 = Utf8               <init>
    #6 = Utf8               ()V
    #7 = Class              #8            // java/util/ArrayList
    #8 = Utf8               java/util/ArrayList
    #9 = Methodref          #7.#3         // java/util/ArrayList."<init>":()V
   #10 = Class              #11           // java/util/Random
   #11 = Utf8               java/util/Random
   #12 = Methodref          #10.#3        // java/util/Random."<init>":()V
   #13 = Class              #14           // ValueClass
   #14 = Utf8               ValueClass
   #15 = Methodref          #10.#16       // java/util/Random.nextInt:(I)I
   #16 = NameAndType        #17:#18       // nextInt:(I)I
   #17 = Utf8               nextInt
   #18 = Utf8               (I)I
   #19 = Methodref          #13.#20       // ValueClass."<init>":(I)V
   #20 = NameAndType        #5:#21        // "<init>":(I)V
   #21 = Utf8               (I)V
   #22 = InterfaceMethodref #23.#24       // java/util/List.add:(Ljava/lang/Object;)Z
   #23 = Class              #25           // java/util/List
   #24 = NameAndType        #26:#27       // add:(Ljava/lang/Object;)Z
   #25 = Utf8               java/util/List
   #26 = Utf8               add
   #27 = Utf8               (Ljava/lang/Object;)Z
   #28 = Fieldref           #29.#30       // java/lang/System.out:Ljava/io/PrintStream;
   #29 = Class              #31           // java/lang/System
   #30 = NameAndType        #32:#33       // out:Ljava/io/PrintStream;
   #31 = Utf8               java/lang/System
   #32 = Utf8               out
   #33 = Utf8               Ljava/io/PrintStream;
   #34 = String             #35           // Before sorting:
   #35 = Utf8               Before sorting:
   #36 = Methodref          #37.#38       // java/io/PrintStream.println:(Ljava/lang/String;)V
   #37 = Class              #39           // java/io/PrintStream
   #38 = NameAndType        #40:#41       // println:(Ljava/lang/String;)V
   #39 = Utf8               java/io/PrintStream
   #40 = Utf8               println
   #41 = Utf8               (Ljava/lang/String;)V
   #42 = Methodref          #43.#44       // Main.printList:(Ljava/util/List;)V
   #43 = Class              #45           // Main
   #44 = NameAndType        #46:#47       // printList:(Ljava/util/List;)V
   #45 = Utf8               Main
   #46 = Utf8               printList
   #47 = Utf8               (Ljava/util/List;)V
   #48 = Methodref          #43.#49       // Main.bubbleSort:(Ljava/util/List;)V
   #49 = NameAndType        #50:#47       // bubbleSort:(Ljava/util/List;)V
   #50 = Utf8               bubbleSort
   #51 = String             #52           // After sorting:
   #52 = Utf8               After sorting:
   #53 = InterfaceMethodref #23.#54       // java/util/List.size:()I
   #54 = NameAndType        #55:#56       // size:()I
   #55 = Utf8               size
   #56 = Utf8               ()I
   #57 = InterfaceMethodref #23.#58       // java/util/List.get:(I)Ljava/lang/Object;
   #58 = NameAndType        #59:#60       // get:(I)Ljava/lang/Object;
   #59 = Utf8               get
   #60 = Utf8               (I)Ljava/lang/Object;
   #61 = Fieldref           #13.#62       // ValueClass.value:I
   #62 = NameAndType        #63:#64       // value:I
   #63 = Utf8               value
   #64 = Utf8               I
   #65 = InterfaceMethodref #23.#66       // java/util/List.set:(ILjava/lang/Object;)Ljava/lang/Object;
   #66 = NameAndType        #67:#68       // set:(ILjava/lang/Object;)Ljava/lang/Object;
   #67 = Utf8               set
   #68 = Utf8               (ILjava/lang/Object;)Ljava/lang/Object;
   #69 = InvokeDynamic      #0:#70        // #0:accept:()Ljava/util/function/Consumer;
   #70 = NameAndType        #71:#72       // accept:()Ljava/util/function/Consumer;
   #71 = Utf8               accept
   #72 = Utf8               ()Ljava/util/function/Consumer;
   #73 = InterfaceMethodref #23.#74       // java/util/List.forEach:(Ljava/util/function/Consumer;)V
   #74 = NameAndType        #75:#76       // forEach:(Ljava/util/function/Consumer;)V
   #75 = Utf8               forEach
   #76 = Utf8               (Ljava/util/function/Consumer;)V
   #77 = Methodref          #37.#78       // java/io/PrintStream.println:()V
   #78 = NameAndType        #40:#6        // println:()V
   #79 = InvokeDynamic      #1:#80        // #1:makeConcatWithConstants:(LValueClass;)Ljava/lang/String;
   #80 = NameAndType        #81:#82       // makeConcatWithConstants:(LValueClass;)Ljava/lang/String;
   #81 = Utf8               makeConcatWithConstants
   #82 = Utf8               (LValueClass;)Ljava/lang/String;
   #83 = Methodref          #37.#84       // java/io/PrintStream.print:(Ljava/lang/String;)V
   #84 = NameAndType        #85:#41       // print:(Ljava/lang/String;)V
   #85 = Utf8               print
   #86 = Utf8               Code
   #87 = Utf8               LineNumberTable
   #88 = Utf8               main
   #89 = Utf8               ([Ljava/lang/String;)V
   #90 = Utf8               StackMapTable
   #91 = Utf8               Signature
   #92 = Utf8               (Ljava/util/List<LValueClass;>;)V
   #93 = Utf8               lambda$printList$0
   #94 = Utf8               (LValueClass;)V
   #95 = Utf8               SourceFile
   #96 = Utf8               Main.java
   #97 = Utf8               BootstrapMethods
   #98 = MethodHandle       6:#99         // REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;
   #99 = Methodref          #100.#101     // java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;
  #100 = Class              #102          // java/lang/invoke/LambdaMetafactory
  #101 = NameAndType        #103:#104     // metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;
  #102 = Utf8               java/lang/invoke/LambdaMetafactory
  #103 = Utf8               metafactory
  #104 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;
  #105 = MethodType         #106          //  (Ljava/lang/Object;)V
  #106 = Utf8               (Ljava/lang/Object;)V
  #107 = MethodHandle       6:#108        // REF_invokeStatic Main.lambda$printList$0:(LValueClass;)V
  #108 = Methodref          #43.#109      // Main.lambda$printList$0:(LValueClass;)V
  #109 = NameAndType        #93:#94       // lambda$printList$0:(LValueClass;)V
  #110 = MethodType         #94           //  (LValueClass;)V
  #111 = MethodHandle       6:#112        // REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
  #112 = Methodref          #113.#114     // java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
  #113 = Class              #115          // java/lang/invoke/StringConcatFactory
  #114 = NameAndType        #81:#116      // makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
  #115 = Utf8               java/lang/invoke/StringConcatFactory
  #116 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
  #117 = String             #118          // \u0001
  #118 = Utf8               \u0001
  #119 = Utf8               InnerClasses
  #120 = Class              #121          // java/lang/invoke/MethodHandles$Lookup
  #121 = Utf8               java/lang/invoke/MethodHandles$Lookup
  #122 = Class              #123          // java/lang/invoke/MethodHandles
  #123 = Utf8               java/lang/invoke/MethodHandles
  #124 = Utf8               Lookup
{
  public Main();
    descriptor: ()V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #1                  // Method java/lang/Object."<init>":()V
         4: return
      LineNumberTable:
        line 21: 0

  public static void main(java.lang.String[]);
    descriptor: ([Ljava/lang/String;)V
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code:
      stack=5, locals=4, args_size=1
         0: new           #7                  // class java/util/ArrayList
         3: dup
         4: invokespecial #9                  // Method java/util/ArrayList."<init>":()V
         7: astore_1
         8: new           #10                 // class java/util/Random
        11: dup
        12: invokespecial #12                 // Method java/util/Random."<init>":()V
        15: astore_2
        16: iconst_0
        17: istore_3
        18: iload_3
        19: bipush        10
        21: if_icmpge     50
        24: aload_1
        25: new           #13                 // class ValueClass
        28: dup
        29: aload_2
        30: bipush        100
        32: invokevirtual #15                 // Method java/util/Random.nextInt:(I)I
        35: invokespecial #19                 // Method ValueClass."<init>":(I)V
        38: invokeinterface #22,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
        43: pop
        44: iinc          3, 1
        47: goto          18
        50: getstatic     #28                 // Field java/lang/System.out:Ljava/io/PrintStream;
        53: ldc           #34                 // String Before sorting:
        55: invokevirtual #36                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
        58: aload_1
        59: invokestatic  #42                 // Method printList:(Ljava/util/List;)V
        62: aload_1
        63: invokestatic  #48                 // Method bubbleSort:(Ljava/util/List;)V
        66: getstatic     #28                 // Field java/lang/System.out:Ljava/io/PrintStream;
        69: ldc           #51                 // String After sorting:
        71: invokevirtual #36                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
        74: aload_1
        75: invokestatic  #42                 // Method printList:(Ljava/util/List;)V
        78: return
      LineNumberTable:
        line 23: 0
        line 24: 8
        line 27: 16
        line 28: 24
        line 27: 44
        line 32: 50
        line 33: 58
        line 36: 62
        line 39: 66
        line 40: 74
        line 41: 78
      StackMapTable: number_of_entries = 2
        frame_type = 254 /* append */
          offset_delta = 18
          locals = [ class java/util/List, class java/util/Random, int ]
        frame_type = 250 /* chop */
          offset_delta = 31

  public static void bubbleSort(java.util.List<ValueClass>);
    descriptor: (Ljava/util/List;)V
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code:
      stack=5, locals=4, args_size=1
         0: iconst_1
         1: istore_1
         2: iload_1
         3: ifeq          104
         6: iconst_0
         7: istore_1
         8: iconst_1
         9: istore_2
        10: iload_2
        11: aload_0
        12: invokeinterface #53,  1           // InterfaceMethod java/util/List.size:()I
        17: if_icmpge     101
        20: aload_0
        21: iload_2
        22: iconst_1
        23: isub
        24: invokeinterface #57,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
        29: checkcast     #13                 // class ValueClass
        32: getfield      #61                 // Field ValueClass.value:I
        35: aload_0
        36: iload_2
        37: invokeinterface #57,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
        42: checkcast     #13                 // class ValueClass
        45: getfield      #61                 // Field ValueClass.value:I
        48: if_icmple     95
        51: aload_0
        52: iload_2
        53: invokeinterface #57,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
        58: checkcast     #13                 // class ValueClass
        61: astore_3
        62: aload_0
        63: iload_2
        64: aload_0
        65: iload_2
        66: iconst_1
        67: isub
        68: invokeinterface #57,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
        73: checkcast     #13                 // class ValueClass
        76: invokeinterface #65,  3           // InterfaceMethod java/util/List.set:(ILjava/lang/Object;)Ljava/lang/Object;
        81: pop
        82: aload_0
        83: iload_2
        84: iconst_1
        85: isub
        86: aload_3
        87: invokeinterface #65,  3           // InterfaceMethod java/util/List.set:(ILjava/lang/Object;)Ljava/lang/Object;
        92: pop
        93: iconst_1
        94: istore_1
        95: iinc          2, 1
        98: goto          10
       101: goto          2
       104: return
      LineNumberTable:
        line 49: 0
        line 50: 2
        line 51: 6
        line 52: 8
        line 53: 20
        line 55: 51
        line 56: 62
        line 57: 82
        line 58: 93
        line 52: 95
        line 62: 104
      StackMapTable: number_of_entries = 5
        frame_type = 252 /* append */
          offset_delta = 2
          locals = [ int ]
        frame_type = 252 /* append */
          offset_delta = 7
          locals = [ int ]
        frame_type = 251 /* same_frame_extended */
          offset_delta = 84
        frame_type = 250 /* chop */
          offset_delta = 5
        frame_type = 2 /* same */
    Signature: #92                          // (Ljava/util/List<LValueClass;>;)V

  public static void printList(java.util.List<ValueClass>);
    descriptor: (Ljava/util/List;)V
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code:
      stack=2, locals=1, args_size=1
         0: aload_0
         1: invokedynamic #69,  0             // InvokeDynamic #0:accept:()Ljava/util/function/Consumer;
         6: invokeinterface #73,  2           // InterfaceMethod java/util/List.forEach:(Ljava/util/function/Consumer;)V
        11: getstatic     #28                 // Field java/lang/System.out:Ljava/io/PrintStream;
        14: invokevirtual #77                 // Method java/io/PrintStream.println:()V
        17: return
      LineNumberTable:
        line 70: 0
        line 73: 11
        line 74: 17
    Signature: #92                          // (Ljava/util/List<LValueClass;>;)V
}
SourceFile: "Main.java"
BootstrapMethods:
  0: #98 REF_invokeStatic java/lang/invoke/LambdaMetafactory.metafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #105 (Ljava/lang/Object;)V
      #107 REF_invokeStatic Main.lambda$printList$0:(LValueClass;)V
      #110 (LValueClass;)V
  1: #111 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #117 \u0001
InnerClasses:
  public static final #124= #120 of #122; // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles


Метод main(String[])
В этом методе инициализируется список, заполняется случайными объектами ValueClass, сортируется и выводится до и после сортировки.

Инициализация и заполнение списка:

new #7 / invokespecial #9 создаёт новый объект ArrayList.
Цикл заполнения списка начинается с инструкции под номером 16 и использует if_icmpge 50 для проверки условия продолжения цикла.
Внутри цикла new #13 / invokespecial #19 создаёт новые объекты ValueClass с случайными значениями.
Вызовы методов для печати и сортировки:

Вызовы методов printList и bubbleSort соответствуют инструкциям invokestatic #42 и invokestatic #48.
Метод bubbleSort(List<ValueClass>)
Метод пузырьковой сортировки содержит вложенные циклы и условия сравнения.

Внешний цикл:
Начинается с проверки флага сортировки (iload_1 / ifeq 104), который повторяется до тех пор, пока не будет выполнен проход без обменов.
Внутренний цикл:
Итерации внутреннего цикла начинаются с инструкции iload_2 и продолжаются до достижения конца списка (if_icmpge 101).
Условие сравнения и обмен:
Сравнение значений происходит с использованием if_icmple 95, где при необходимости выполняется обмен значений (invokeinterface #57 для доступа и invokeinterface #65 для установки новых значений).
Метод printList(List<ValueClass>)
Метод печатает элементы списка.

Перебор элементов списка:
Использует вызов invokedynamic #69 для итерации по списку с помощью метода forEach, применяя лямбда-выражение или метод ссылку для вывода элементов.
Важные моменты:

Циклы в байт-коде представлены комбинациями инструкций загрузки, сравнения и условного перехода (if_icmpge, ifeq, goto).
Условные операторы if реализованы через инструкции сравнения (if_icmple, ifeq) и условного перехода.
Методы вызываются через invokevirtual, invokespecial, invokestatic, в зависимости от типа метода (виртуальный, специальный, статический).