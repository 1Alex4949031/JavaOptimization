    Shrinking — это процесс, который используется в оптимизации Android приложений,
входящий в состав инструментария ProGuard. Этот процесс уменьшает размер APK-файла путем удаления неиспользуемого кода и ресурсов.
Это позволяет сделать приложение более легким и быстрым, а также уменьшить количество времени, необходимое для его загрузки
и установки на устройстве пользователя.

    Obfuscation — это процесс обфускации кода, который используется в контексте разработки Android приложений.
Этот процесс заключается в преобразовании исходного кода приложения таким образом, чтобы его было трудно читать и анализировать,
что делает изучение кода потенциальными злоумышленниками затруднительным.

    Optimization относится к процессу оптимизации кода приложения, который также является частью функциональности инструмента ProGuard,
широко используемого в разработке Android-приложений. Этот процесс направлен на улучшение эффективности выполнения кода,
сокращение его размера и улучшение общей производительности приложения.

Основные аспекты оптимизации ProGuard:
    1) Удаление неиспользуемого кода: ProGuard анализирует ваше приложение, чтобы определить и удалить код,
который никогда не вызывается или используется. Это включает в себя не только методы, но и переменные и классы.
    2) Инлайнинг: Это метод, при котором вызовы методов заменяются непосредственно их содержимым, если это уместно.
Это может уменьшить издержки на вызовы методов и сделать код более компактным.
    3) Упрощение кода: ProGuard может упростить арифметические выражения и условные операторы,
заменяя их более простыми и быстрыми операциями, где это возможно.
    4) Переупорядочивание полей и методов: Инструмент может переставлять поля и методы для оптимального использования памяти
и быстродействия, основываясь на их использовании в коде.

В конфигурации ProGuard вы можете настроить различные аспекты обработки вашего кода, включая оптимизацию, обфускацию, и исключения для конкретных классов и методов. Вот примеры настройки для каждого из ваших запросов:

1. Ничего не произошло
Чтобы ProGuard ничего не делал, можно использовать директиву -dontshrink, -dontoptimize, и -dontobfuscate,
которые отключают сокращение, оптимизацию и обфускацию соответственно.
-dontshrink
-dontoptimize
-dontobfuscate

2. ProGuard сделал все что мог — все вырезал и обфусцировал.

-optimizationpasses 5 - количество проходов оптимизации

-overloadaggressively - использовать агрессивную стратегию перегрузки имён методов.
В обычных условиях, если методы не переопределяют методы из суперкласса или не реализуют абстрактные методы интерфейса,
ProGuard может переименовать их так, чтобы разные методы имели одинаковые имена, но различные сигнатуры.
Это увеличивает степень обфускации, затрудняя понимание структуры и работы кода.

-repackageclasses '' - указывает переместить все классы в корневой пакет (или в указанный пакет, если после '' будет указано имя пакета).
Если пакет не указан (как в вашем случае), классы останутся в их исходных пакетах.
Перепаковка классов в общий пакет может помочь скрыть организацию пакетов оригинального приложения, увеличивая обфускацию.

-allowaccessmodification - опция разрешает ProGuard изменять модификаторы доступа классов и членов во время процесса обфускации и оптимизации.

3. Не трогал некоторые классы по имени
Чтобы исключить конкретные классы, используйте директиву -keep с именем класса:
-keep class com.example.MyClass { *; }

4. Не трогал некоторые методы по имени
Чтобы исключить методы по имени в классе, используйте:

-keep class com.example.MyClass {
    void myMethod();
}

5. Не трогал некоторые методы по сигнатуре
Чтобы сохранить методы с определенной сигнатурой, укажите полную сигнатуру метода:

-keep class com.example.MyClass {
    void myMethod(java.lang.String, int);
}






